#include<bits/stdc++.h>
using namespace std;
int test,n,parent_node,child_node;
char x;
struct node
{
    int data;
    node *left,*right;
};
node *create_node(int data)
{
    node *temp=new node;
    temp->data=data;
    temp->left=temp->right=NULL;
    return temp;
}
void build_tree(node *temp,int parent_node, int child_node, char x)
{
    if(temp!=NULL)
    {
        if(temp->data==parent_node)
        {
            if(x=='L')temp->left=create_node(child_node);
            else temp->right=create_node(child_node);
        }
        else 
        {
            build_tree(temp->left,parent_node,child_node,x);
            build_tree(temp->right,parent_node,child_node,x);
        }
    }
}
bool check1(node *temp) 
{
    if (temp == NULL) return 1;
    if ((temp->left != NULL && temp->right == NULL) || (temp->left == NULL && temp->right != NULL)) 
    return 0;
    return check1(temp->left) && check1(temp->right);
}
int count_leaf(node *temp)
{
    if(temp==NULL)return 0;
    if(temp->left==NULL && temp->right==NULL)
    return 1;
    return count_leaf(temp->left)+count_leaf(temp->right);
}
int main()
{
    cin>>test;
    while(test--)
    {
        cin>>n;
        cin>>parent_node>>child_node>>x;
        node *temp=create_node(parent_node);
        build_tree(temp,parent_node,child_node,x);
        for(int i=2;i<=n;i++)
        {
            cin>>parent_node>>child_node>>x;
            build_tree(temp,parent_node,child_node,x);
        }
        if(check1(temp)&&(count_leaf(temp->left)==count_leaf(temp->right)))
        {
            cout<<"Yes"<<endl;
        }
        else cout<<"No"<<endl;
    }
    return 0;
}
