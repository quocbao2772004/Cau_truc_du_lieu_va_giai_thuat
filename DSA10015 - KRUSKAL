#include <bits/stdc++.h>
#define l length()
#define f(i,a,b) for(int i=a;i<=b;i++)
#define f1(i,a,b) for(int i=a;i>=b;i--)
#define f2(i,a,b,k) for(int i=a;i<=b;i+=k)
#define ll long long
#define pb push_back
#define ft first
#define sd second
#define vll vector<ll>
#define vi vector<int>
#define vb vector<bool>
#define all(x) x.begin(),x.end()
#define pii pair<int,int>
using namespace std;
const ll mod=123456789;
typedef vector<vll> Matrix;
void faster()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
}
struct edge
{
    int u,v;
    int w;
    edge (int u,int v,int w)
    {
        this->u=u;
        this->v=v;
        this->w=w;
    }
};
const int N=1005;
int test,n,m;
int x,y,w;
int parent[N],size[N];
vector<edge>canh;
void make_set()
{
    for(int i=1;i<=n;i++)
    {
        parent[i]=i;
        size[i]=1;
    }
}
int find(int v)
{
    if(v==parent[v])return v;
    return parent[v]=find(parent[v]);
}
bool Union(int a,int b)
{
    a=find(a);
    b=find(b);
    if(a==b)return false;
    if(size[a]<size[b])swap(a,b);
    parent[b]=a;
    size[a]+=size[b];
    return true;
}
void inp()
{
    cin>>n>>m;
    for(int i=1;i<=m;i++)
    {
        cin>>x>>y>>w;
        edge e=edge(x,y,w);
        canh.push_back(e);
    }
}
bool cmp(edge a, edge b)
{
    return a.w<b.w;
}
void kruskal()
{
    vector<edge>mst;
    int d=0;
    sort(canh.begin(),canh.end(),cmp);
    for(int i=0;i<m;i++)
    {
        if(mst.size()==n-1)break;
        edge e=canh[i];
        if(Union(e.u,e.v))
        {
            mst.push_back(e);
            d+=e.w;
        }
    }
    cout<<d<<endl;
}
int main()
{
    faster();
    cin>>test;
    while(test--)
    {
        inp();
        make_set();
        kruskal();
        canh.clear();

    }
    return 0;
}
