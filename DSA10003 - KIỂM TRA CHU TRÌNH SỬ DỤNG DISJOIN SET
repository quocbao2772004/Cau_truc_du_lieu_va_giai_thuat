#include <bits/stdc++.h>
#define l length()
#define f(i,a,b) for(int i=a;i<=b;i++)
#define f1(i,a,b) for(int i=a;i>=b;i--)
#define f2(i,a,b,k) for(int i=a;i<=b;i+=k)
#define ll long long
#define pb push_back
#define ft first
#define sd second
#define vll vector<ll>
#define vi vector<int>
#define vb vector<bool>
#define all(x) x.begin(),x.end()
#define pii pair<int,int>
using namespace std;
const ll mod=123456789;
typedef vector<vll> Matrix;
void faster()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
}
struct edge
{
    int u,v;
    
    edge(int u,int v)
    {
        this->u=u;
        this->v=v;
    }
};
int test;
const int N=1005;
int parent[N],size[N];
int n,m,u,v;
vector<edge>canh;
void make_set()
{
    for(int i=1;i<=n;i++)
    {
        parent[i]=i;
        size[i]=1;
    }
}
int find(int v)
{
    if(v==parent[v])return v;
    else return parent[v]=find(parent[v]);
}
bool Union(int a,int b)
{
    a=find(a);
    b=find(b);
    if(a==b)return false;
    if(size[a]<size[b])swap(a,b);
    parent[b]=a;
    size[a]+=size[b];
    return true;
}
bool check(vector<edge>&canh)
{
    for(auto e : canh)
    {
        int canh_u=find(e.u);
        int canh_v=find(e.v);
        if(canh_u==canh_v)return true;
        Union(canh_u,canh_v);
    }
    return false;
}
void inp()
{
    cin>>n>>m;
    for(int i=1;i<=m;i++)
    {
        cin>>u>>v;
        canh.push_back(edge(u,v));
    }
}
int main()
{
    faster();
    cin>>test;
    while(test--)
    {
        inp();
        make_set();
        if(check(canh))
        {
            cout<<"YES"<<endl;
        }
        else cout<<"NO"<<endl;
        canh.clear();

    }
    return 0;
}
